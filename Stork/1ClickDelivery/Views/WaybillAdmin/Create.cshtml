@model _1ClickDelivery.ViewModels.AdminWaybillCreateViewModel


<div class="container" style="margin-top:200px">
    <div class="row">
        @using (Html.BeginForm("Create", "WaybillAdmin", FormMethod.Post, new { id = "waybillCreateForm" }))
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                <h4>Create Manual Waybill</h4>
                <div style="margin-top:15px">
                    @Html.ActionLink("Back to List", "Index")

                </div>
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="col-xs-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.ManualWayBillNo, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.ManualWayBillNo, new { htmlAttributes = new { @class = "form-control", maxlength = "7" } })
                            @Html.ValidationMessageFor(model => model.ManualWayBillNo, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.SenderName, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.SenderName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.SenderName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.SelectedArea, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.DropDownListFor(model => model.SelectedArea, ViewBag.Areas as IEnumerable<SelectListItem>, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.SelectedArea, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.PickupAddress, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.PickupAddress, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.PickupAddress, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.ItemDescription, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            <textarea class="form-control" maxlength="160" rows="2" id="ItemDescription" name="ItemDescription"></textarea>
                            @Html.ValidationMessageFor(model => model.ItemDescription, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.SpecialInstruction, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            <textarea class="form-control" maxlength="160" rows="2" id="SpecialInstruction" name="SpecialInstruction"></textarea>
                            @Html.ValidationMessageFor(model => model.SpecialInstruction, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-4 control-label">Pickup Date</label>
                        <div class="col-md-8">
                            @Html.DropDownListFor(x => Model.SelectedPickupDate, new SelectList(Model.PickupDates, "Value", "Text"), new { @class = "form-control" })
                            @Html.ValidationMessageFor(x => x.SelectedPickupDate, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-xs-6">


                    <div class="form-group">
                        @Html.LabelFor(model => model.ReceiverName, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.ReceiverName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ReceiverName, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.ReceiverPhoneNo, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.ReceiverPhoneNo, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ReceiverPhoneNo, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.SelectedDeliveryArea, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.DropDownListFor(model => model.SelectedDeliveryArea, ViewBag.Areas as IEnumerable<SelectListItem>, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.SelectedDeliveryArea, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.DestinationAddress, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.DestinationAddress, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.DestinationAddress, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-md-4">Status: </label>
                        <div class="col-md-8">
                            <select name="status" id="spstatus" class="form-control">
                                <option value="Scheduled">Scheduled</option>
                                <option value="Collection">Collection</option>
                                <option value="Collected">Collected</option>
                                <option value="Delivery">Delivery</option>
                                <option value="Delivered">Delivered</option>
                                <option value="Cancelled">Cancelled</option>
                            </select>
                        </div>
                       

                    </div>

                    <div class="form-group">

                        <div class="col-xs-12 text-right">

                            <input type="submit" value="Create" class="btn btn-primary " />

                        </div>

                    </div>
                </div>


            </div>
        }

    </div>
</div>




@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script type="text/javascript">

        $("footer").remove();
        removeEffectOnNavbar();
        $("#navbarCollapse li:nth-child(4)").addClass("active");

        $("#ManualWayBillNo").keypress(function (e) {
            if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
                return false;
            }
        });


    </script>

}